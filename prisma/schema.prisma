// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int      @id @default(autoincrement())
  icon        String
  title       String
  description String
  rank        Int?
  created_at  DateTime @default(now()) @map(name: "created_at")
  updated_at  DateTime @default(now()) @map(name: "updated_at")
  links       Link[]

  @@map(name: "category")
}

model Link {
  id          Int      @id @default(autoincrement())
  icon        String
  url         String
  title       String
  description String
  rank        Int?
  public      Boolean  @default(true)
  status      Int      @default(1)
  created_at  DateTime @default(now()) @map(name: "created_at")
  updated_at  DateTime @default(now()) @map(name: "updated_at")
  cid         Int
  catagory    Category @relation(fields: [cid], references: [id])

  @@map(name: "link")
}

model Account {
  id                       Int      @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  created_at               DateTime @default(now()) @map(name: "created_at")
  updated_at               DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  created_at    DateTime  @default(now()) @map(name: "created_at")
  updated_at    DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
